name: CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  freeze-check:
    name: enforce-freeze
    runs-on: ubuntu-latest
    steps:
      - name: Check production freeze flag
        env:
          PROD_FREEZE: ${{ vars.PROD_FREEZE }}
          EVENT_NAME: ${{ github.event_name }}
          REF_TYPE: ${{ github.ref_type }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          FREEZE="${PROD_FREEZE:-false}"
          if [[ "${FREEZE,,}" == "true" ]]; then
            if [[ "${REF_TYPE}" == "tag" ]]; then
              echo "Freeze bypassed for tag ${REF_NAME}."
              exit 0
            fi
            if [[ "${EVENT_NAME}" == "pull_request" ]]; then
              echo "Production freeze active – PR merges are temporarily blocked." >&2
              exit 1
            fi
            if [[ "${REF_NAME}" == "main" ]]; then
              echo "Production freeze active – direct pushes to main are blocked." >&2
              exit 1
            fi
          fi
          echo "No active production freeze."

  security-scan:
    runs-on: ubuntu-latest
    needs: freeze-check
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.14.0
        with:
          scan-type: fs
          severity: CRITICAL
          ignore-unfixed: true
          exit-code: '1'
          scan-ref: .

      - name: Run Trivy config scan
        uses: aquasecurity/trivy-action@0.14.0
        with:
          scan-type: config
          severity: CRITICAL
          ignore-unfixed: true
          exit-code: '1'
          scan-ref: .

  build:
    needs:
      - freeze-check
      - security-scan
    runs-on: ubuntu-latest
    env:
      VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'

      - name: Validate Composer configuration
        run: composer validate
        working-directory: backend

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      - name: Run frontend lint
        run: npm run lint
        working-directory: frontend

      - name: Run frontend tests
        run: npm test
        working-directory: frontend

      - name: Build frontend
        run: npm run build
        working-directory: frontend

      - name: Build backend image
        run: docker build --target builder -t backend-ci backend

      - name: Run PHPStan
        run: docker run --rm backend-ci vendor/bin/phpstan analyse

      - name: Run backend tests
        run: docker run --rm backend-ci vendor/bin/phpunit --testdox

  load-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Prepare environment
        run: |
          cat <<'EOF' > .env
          POSTGRES_USER=ci
          POSTGRES_PASSWORD=ci
          POSTGRES_DB=ci
          DATABASE_URL=postgresql://ci:ci@db:5432/ci
          APP_ENV=prod
          APP_SECRET=2ff30f9cba870bbdc47c4b818758705d42aa6e143f9ebf8a9b76caab0b086cf2
          PROD_FREEZE=false
          DOMAIN=ci.silentoakranch.test
          BOOKING_DOMAIN=booking.ci.silentoakranch.test
          LETSENCRYPT_EMAIL=ops@example.com
          TRUSTED_PROXIES=127.0.0.1
          TRUSTED_HOSTS=^.+$
          STRIPE_SECRET_KEY=sk_test_ci
          VITE_STRIPE_PUBLISHABLE_KEY=pk_test_ci
          REDIS_URL=redis://redis:6379
          JWT_SECRET_KEY=/var/www/backend/config/jwt/private.pem
          JWT_PUBLIC_KEY=/var/www/backend/config/jwt/public.pem
          JWT_PASSPHRASE=ci-passphrase
          MARIADB_PASSWORD=wordpress
          MARIADB_ROOT_PASSWORD=wordpress
          STATUS_DASH_AUTH_USERS=ci:ci-password
          EOF
          mkdir -p shared/jwt/backend shared/backend/var shared/agreements/signing shared/audit

      - name: Start services
        run: docker compose up -d --wait db redis backend

      - name: Run wrk benchmark
        run: |
          docker compose exec -T -u root backend apk add --no-cache wrk
          docker compose exec -T backend wrk -t4 -c16 -d30s --latency http://127.0.0.1:8080/health | tee wrk.txt
          python3 - <<'PY'
          import re
          import sys

          text = open('wrk.txt', 'r', encoding='utf-8').read()
          match = re.search(r'Latency\s+([0-9]+(?:\.[0-9]+)?)([a-z]+)', text, re.IGNORECASE)
          if not match:
              print('Unable to parse wrk output for latency', file=sys.stderr)
              sys.exit(1)
          value = float(match.group(1))
          unit = match.group(2).lower()
          multipliers = {'us': 0.001, 'ms': 1, 's': 1000}
          if unit not in multipliers:
              print(f'Unexpected latency unit: {unit}', file=sys.stderr)
              sys.exit(1)
          avg_ms = value * multipliers[unit]
          print(f'Average latency: {avg_ms:.2f} ms')
          if avg_ms >= 400:
              print('Latency regression detected (> 400 ms).', file=sys.stderr)
              sys.exit(1)
          PY

      - name: Tear down stack
        if: always()
        run: docker compose down --volumes

  audit-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'

      - name: Install backend dependencies
        run: composer install --no-interaction --prefer-dist
        working-directory: backend

      - name: Run audit regression tests
        run: ./vendor/bin/phpunit --group audit --testdox
        working-directory: backend

  wp-smoke:
    name: wp-smoke (${{ matrix.wordpress_image }})
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        include:
          - wordpress_image: wordpress:6.4.3-php8.3-apache
            site_url: http://localhost
    steps:
      - uses: actions/checkout@v4

      - name: Prepare WordPress environment
        env:
          SITE_URL: ${{ matrix.site_url }}
        run: |
          cat <<EOF > .env
          WORDPRESS_DB_HOST=wp-db
          WORDPRESS_DB_NAME=wordpress
          WORDPRESS_DB_USER=wordpress
          WORDPRESS_DB_PASSWORD=wordpress
          WORDPRESS_TABLE_PREFIX=wp_
          WORDPRESS_AUTH_KEY=1e5f69c7f8c845c6b9d0b7e6e3dd7d54
          WORDPRESS_SECURE_AUTH_KEY=2f6a7b8c9d0e1f2a3b4c5d6e7f8091a2
          WORDPRESS_LOGGED_IN_KEY=3a4b5c6d7e8f901a2b3c4d5e6f708192
          WORDPRESS_NONCE_KEY=4b5c6d7e8f901a2b3c4d5e6f7081920a
          WORDPRESS_AUTH_SALT=5c6d7e8f901a2b3c4d5e6f7081920a3b
          WORDPRESS_SECURE_AUTH_SALT=6d7e8f901a2b3c4d5e6f7081920a3b4c
          WORDPRESS_LOGGED_IN_SALT=7e8f901a2b3c4d5e6f7081920a3b4c5d
          WORDPRESS_NONCE_SALT=8f901a2b3c4d5e6f7081920a3b4c5d6e
          WORDPRESS_ADMIN_EMAIL=admin@example.com
          WORDPRESS_DOMAIN=${SITE_URL}
          MARIADB_DATABASE=wordpress
          MARIADB_USER=wordpress
          MARIADB_PASSWORD=wordpress
          MARIADB_ROOT_PASSWORD=rootpassword
          EOF

      - name: Pull required images
        env:
          WORDPRESS_IMAGE: ${{ matrix.wordpress_image }}
        run: docker compose pull --quiet wordpress wp-db

      - name: Start WordPress stack
        env:
          WORDPRESS_IMAGE: ${{ matrix.wordpress_image }}
        run: docker compose up --detach --wait --pull always --quiet-pull wordpress wp-db

      - name: Wait for database readiness
        env:
          WORDPRESS_IMAGE: ${{ matrix.wordpress_image }}
          MARIADB_USER: wordpress
          MARIADB_PASSWORD: wordpress
        run: |
          for attempt in {1..30}; do
            if docker compose exec -T wp-db mysqladmin ping -u"${MARIADB_USER}" -p"${MARIADB_PASSWORD}" >/dev/null 2>&1; then
              exit 0
            fi
            sleep 2
          done
          echo "Database did not become ready in time" >&2
          exit 1

      - name: Install WP-CLI inside container
        env:
          WORDPRESS_IMAGE: ${{ matrix.wordpress_image }}
        run: |
          docker compose exec -T -u root wordpress sh -lc 'if ! command -v wp >/dev/null 2>&1; then curl -sS https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -o /usr/local/bin/wp && chmod +x /usr/local/bin/wp; fi'

      - name: Install WordPress
        env:
          WORDPRESS_IMAGE: ${{ matrix.wordpress_image }}
        run: |
          docker compose exec -T wordpress wp core install --url="${{ matrix.site_url }}" --title="Silent Oak Ranch" --admin_user="smoke-admin" --admin_password="sor-Smoke-Admin42!" --admin_email="admin@example.com" --skip-email --allow-root

      - name: Verify installation
        env:
          WORDPRESS_IMAGE: ${{ matrix.wordpress_image }}
        run: docker compose exec -T wordpress wp core is-installed --allow-root

      - name: Activate sor-booking plugin
        env:
          WORDPRESS_IMAGE: ${{ matrix.wordpress_image }}
        run: docker compose exec -T wordpress wp plugin activate sor-booking --allow-root

      - name: Expect unauthorized API response
        env:
          WORDPRESS_IMAGE: ${{ matrix.wordpress_image }}
        run: |
          STATUS=$(docker compose exec -T wordpress sh -lc 'curl -s -o /tmp/wp-smoke-response -w "%{http_code}" http://localhost/wp-json/sor/v1/paypal/webhook')
          STATUS=$(echo "$STATUS" | tr -d '\r\n')
          docker compose exec -T wordpress cat /tmp/wp-smoke-response || true
          if [ "$STATUS" -ne 401 ]; then
            echo "Expected HTTP 401, got $STATUS"
            exit 1
          fi

      - name: Tear down stack
        if: always()
        env:
          WORDPRESS_IMAGE: ${{ matrix.wordpress_image }}
        run: docker compose down -v --remove-orphans

  wp-contracts-ui-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Run contracts UI smoke
        run: ./scripts/wp-contracts-ui-tests.sh

  monitoring-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Prepare shared directories
        run: |
          mkdir -p shared/jwt/backend shared/backend/var shared/agreements/signing shared/audit wp-content

      - name: Prepare environment
        run: |
          cat <<'ENV' > .env
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=postgres
          POSTGRES_DB=postgres
          MARIADB_ROOT_PASSWORD=rootpassword
          MARIADB_USER=wordpress
          MARIADB_PASSWORD=wordpress
          MARIADB_DATABASE=wordpress
          WORDPRESS_DB_HOST=wp-db
          WORDPRESS_DB_USER=wordpress
          WORDPRESS_DB_PASSWORD=wordpress
          WORDPRESS_DB_NAME=wordpress
          WORDPRESS_TABLE_PREFIX=wp_
          DOMAIN=ci.silent-oak.local
          BOOKING_DOMAIN=book.ci.silent-oak.local
          LETSENCRYPT_EMAIL=ci@silent-oak.local
          STATUS_DASH_AUTH_USERS=admin:$apr1$Vq6NPmrh$8Dvip4HZaDhuXQog76oVK1
          STORAGE_BOX_REMOTE=silent-oak
          WP_BRIDGE_KEY=test-key
          WP_BRIDGE_SECRET=test-secret
          TZ=Europe/Berlin
          ENV

      - name: Build backup image
        run: docker compose build backup-cron

      - name: Start databases
        run: docker compose up -d db wp-db

      - name: Wait for Postgres
        run: |
          for attempt in {1..20}; do
            if docker compose exec -T db pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" >/dev/null 2>&1; then
              exit 0
            fi
            sleep 2
          done
          echo "Postgres did not become ready in time" >&2
          exit 1
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres

      - name: Wait for MariaDB
        run: |
          for attempt in {1..30}; do
            if docker compose exec -T wp-db mysqladmin ping -u"${MARIADB_USER}" -p"${MARIADB_PASSWORD}" >/dev/null 2>&1; then
              exit 0
            fi
            sleep 2
          done
          echo "MariaDB did not become ready in time" >&2
          exit 1
        env:
          MARIADB_USER: wordpress
          MARIADB_PASSWORD: wordpress

      - name: Start application services
        run: docker compose up -d backend wordpress grafana

      - name: Install WP-CLI
        run: |
          docker compose exec -T -u root wordpress sh -lc 'if ! command -v wp >/dev/null 2>&1; then curl -sS https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -o /usr/local/bin/wp && chmod +x /usr/local/bin/wp; fi'

      - name: Install WordPress
        env:
          SITE_URL: http://localhost
        run: |
          docker compose exec -T wordpress wp core install --url="${SITE_URL}" --title="Silent Oak Monitoring" --admin_user="admin" --admin_password="ci-Admin-123" --admin_email="admin@example.com" --skip-email --allow-root
          docker compose exec -T wordpress wp plugin activate sor-booking --allow-root
          docker compose exec -T wordpress wp option patch update sor_booking_options api_enabled 1 --allow-root
          docker compose exec -T wordpress wp option patch update sor_booking_options api_base_url http://backend:8080/api --allow-root
          docker compose exec -T wordpress wp option patch update sor_booking_options api_key test-key --allow-root
          docker compose exec -T wordpress wp option patch update sor_booking_options api_secret test-secret --allow-root

      - name: Check backend health endpoint
        run: docker compose exec -T backend curl -fsS http://localhost:9000/health

      - name: Check WordPress bridge status
        run: docker compose exec -T wordpress curl -fsS http://localhost/wp-json/sor/v1/status

      - name: Check Grafana API health
        run: docker compose exec -T grafana curl -fsS http://localhost:3000/api/health

      - name: Tear down stack
        if: always()
        run: docker compose down -v --remove-orphans
