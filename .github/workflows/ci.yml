name: CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'

      - name: Validate Composer configuration
        run: composer validate
        working-directory: backend

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      - name: Run frontend lint
        run: npm run lint
        working-directory: frontend

      - name: Run frontend tests
        run: npm test
        working-directory: frontend

      - name: Build frontend
        run: npm run build
        working-directory: frontend

      - name: Build backend image
        run: docker build --target builder -t backend-ci backend

      - name: Run PHPStan
        run: docker run --rm backend-ci vendor/bin/phpstan analyse

      - name: Run backend tests
        run: docker run --rm backend-ci vendor/bin/phpunit --testdox

  audit-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'

      - name: Install backend dependencies
        run: composer install --no-interaction --prefer-dist
        working-directory: backend

      - name: Run audit regression tests
        run: ./vendor/bin/phpunit --group audit --testdox
        working-directory: backend

  wp-smoke:
    name: wp-smoke (${{ matrix.wordpress_image }})
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        include:
          - wordpress_image: wordpress:6.4.3-php8.3-apache
            site_url: http://localhost
    steps:
      - uses: actions/checkout@v4

      - name: Prepare WordPress environment
        env:
          SITE_URL: ${{ matrix.site_url }}
        run: |
          cat <<EOF > .env
          WORDPRESS_DB_HOST=wp-db
          WORDPRESS_DB_NAME=wordpress
          WORDPRESS_DB_USER=wordpress
          WORDPRESS_DB_PASSWORD=wordpress
          WORDPRESS_TABLE_PREFIX=wp_
          WORDPRESS_AUTH_KEY=1e5f69c7f8c845c6b9d0b7e6e3dd7d54
          WORDPRESS_SECURE_AUTH_KEY=2f6a7b8c9d0e1f2a3b4c5d6e7f8091a2
          WORDPRESS_LOGGED_IN_KEY=3a4b5c6d7e8f901a2b3c4d5e6f708192
          WORDPRESS_NONCE_KEY=4b5c6d7e8f901a2b3c4d5e6f7081920a
          WORDPRESS_AUTH_SALT=5c6d7e8f901a2b3c4d5e6f7081920a3b
          WORDPRESS_SECURE_AUTH_SALT=6d7e8f901a2b3c4d5e6f7081920a3b4c
          WORDPRESS_LOGGED_IN_SALT=7e8f901a2b3c4d5e6f7081920a3b4c5d
          WORDPRESS_NONCE_SALT=8f901a2b3c4d5e6f7081920a3b4c5d6e
          WORDPRESS_ADMIN_EMAIL=admin@example.com
          WORDPRESS_DOMAIN=${SITE_URL}
          MARIADB_DATABASE=wordpress
          MARIADB_USER=wordpress
          MARIADB_PASSWORD=wordpress
          MARIADB_ROOT_PASSWORD=rootpassword
          EOF

      - name: Pull required images
        env:
          WORDPRESS_IMAGE: ${{ matrix.wordpress_image }}
        run: docker compose pull --quiet wordpress wp-db

      - name: Start WordPress stack
        env:
          WORDPRESS_IMAGE: ${{ matrix.wordpress_image }}
        run: docker compose up --detach --wait --pull always --quiet-pull wordpress wp-db

      - name: Wait for database readiness
        env:
          WORDPRESS_IMAGE: ${{ matrix.wordpress_image }}
          MARIADB_USER: wordpress
          MARIADB_PASSWORD: wordpress
        run: |
          for attempt in {1..30}; do
            if docker compose exec -T wp-db mysqladmin ping -u"${MARIADB_USER}" -p"${MARIADB_PASSWORD}" >/dev/null 2>&1; then
              exit 0
            fi
            sleep 2
          done
          echo "Database did not become ready in time" >&2
          exit 1

      - name: Install WP-CLI inside container
        env:
          WORDPRESS_IMAGE: ${{ matrix.wordpress_image }}
        run: |
          docker compose exec -T -u root wordpress sh -lc 'if ! command -v wp >/dev/null 2>&1; then curl -sS https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -o /usr/local/bin/wp && chmod +x /usr/local/bin/wp; fi'

      - name: Install WordPress
        env:
          WORDPRESS_IMAGE: ${{ matrix.wordpress_image }}
        run: |
          docker compose exec -T wordpress wp core install --url="${{ matrix.site_url }}" --title="Silent Oak Ranch" --admin_user="smoke-admin" --admin_password="sor-Smoke-Admin42!" --admin_email="admin@example.com" --skip-email --allow-root

      - name: Verify installation
        env:
          WORDPRESS_IMAGE: ${{ matrix.wordpress_image }}
        run: docker compose exec -T wordpress wp core is-installed --allow-root

      - name: Activate sor-booking plugin
        env:
          WORDPRESS_IMAGE: ${{ matrix.wordpress_image }}
        run: docker compose exec -T wordpress wp plugin activate sor-booking --allow-root

      - name: Expect unauthorized API response
        env:
          WORDPRESS_IMAGE: ${{ matrix.wordpress_image }}
        run: |
          STATUS=$(docker compose exec -T wordpress sh -lc 'curl -s -o /tmp/wp-smoke-response -w "%{http_code}" http://localhost/wp-json/sor/v1/paypal/webhook')
          STATUS=$(echo "$STATUS" | tr -d '\r\n')
          docker compose exec -T wordpress cat /tmp/wp-smoke-response || true
          if [ "$STATUS" -ne 401 ]; then
            echo "Expected HTTP 401, got $STATUS"
            exit 1
          fi

      - name: Tear down stack
        if: always()
        env:
          WORDPRESS_IMAGE: ${{ matrix.wordpress_image }}
        run: docker compose down -v --remove-orphans
