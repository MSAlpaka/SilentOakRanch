name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build Docker images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build application images
        env:
          COMPOSE_PROJECT_NAME: stallapp
        run: docker compose build backend frontend

      - name: Export Docker images
        run: |
          mkdir -p docker-images
          docker save silentoakranch/backend:latest -o docker-images/backend.tar
          docker save silentoakranch/frontend:latest -o docker-images/frontend.tar

      - name: Upload Docker images
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: docker-images/
          if-no-files-found: error

  deploy:
    name: Deploy application
    runs-on: ubuntu-latest
    needs: [build]
    env:
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
    steps:
      - uses: actions/checkout@v4

      - name: Download Docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: docker-images

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Ensure target directory exists
        run: |
          ssh -o StrictHostKeyChecking=no "${SSH_USER}@${SSH_HOST}" "mkdir -p /srv/stallapp"

      - name: Sync repository
        run: |
          rsync -az --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='vendor' \
            --exclude='dist' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ "${SSH_USER}@${SSH_HOST}:/srv/stallapp"

      - name: Update application services
        run: |
          ssh -o StrictHostKeyChecking=no "${SSH_USER}@${SSH_HOST}" <<'EOSSH'
          set -euo pipefail
          cd /srv/stallapp
          if ls docker-images/*.tar >/dev/null 2>&1; then
            for archive in docker-images/*.tar; do
              docker load -i "$archive"
            done
            rm -f docker-images/*.tar
          fi
          docker compose pull db proxy letsencrypt || true
          docker compose up -d
          docker system prune -f
          EOSSH
